	.zxbasic
	org 32768
.core.__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (.core.__CALL_BACK__), hl
	ei
	jp .core.__MAIN_PROGRAM__
.core.__CALL_BACK__:
	DEFW 0
.core.ZXBASIC_USER_DATA:
	; Defines USER DATA Length in bytes
.core.ZXBASIC_USER_DATA_LEN EQU .core.ZXBASIC_USER_DATA_END - .core.ZXBASIC_USER_DATA
	.core.__LABEL__.ZXBASIC_USER_DATA_LEN EQU .core.ZXBASIC_USER_DATA_LEN
	.core.__LABEL__.ZXBASIC_USER_DATA EQU .core.ZXBASIC_USER_DATA
_sNumber:
	DEFB 00
_sNumber2:
	DEFB 00
_sNumber3:
	DEFB 00
_x:
	DEFB 00
_y:
	DEFB 00
_b:
	DEFB 00
_sprite:
	DEFW .LABEL.__LABEL46
_sprite.__DATA__.__PTR__:
	DEFW _sprite.__DATA__
_sprite.__DATA__:
	DEFB 40h
	DEFB 46h
	DEFB 46h
	DEFB 40h
	DEFB 08h
	DEFB 0F4h
	DEFB 02h
	DEFB 01h
.LABEL.__LABEL46:
	DEFW 0000h
	DEFB 01h
_sprite2:
	DEFW .LABEL.__LABEL47
_sprite2.__DATA__.__PTR__:
	DEFW _sprite2.__DATA__
_sprite2.__DATA__:
	DEFB 14h
	DEFB 0BDh
	DEFB 42h
	DEFB 4Ah
	DEFB 22h
	DEFB 1Ch
	DEFB 08h
	DEFB 14h
	DEFB 32h
	DEFB 22h
	DEFB 46h
	DEFB 65h
	DEFB 3Ah
	DEFB 12h
	DEFB 13h
	DEFB 18h
.LABEL.__LABEL47:
	DEFW 0000h
	DEFB 01h
_sprite3:
	DEFW .LABEL.__LABEL48
_sprite3.__DATA__.__PTR__:
	DEFW _sprite3.__DATA__
_sprite3.__DATA__:
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 49h
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL48:
	DEFW 0000h
	DEFB 01h
_tileSet:
	DEFW .LABEL.__LABEL49
_tileSet.__DATA__.__PTR__:
	DEFW _tileSet.__DATA__
_tileSet.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 3Ch
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 42h
	DEFB 3Ch
	DEFB 00h
	DEFB 00h
	DEFB 18h
	DEFB 18h
	DEFB 24h
	DEFB 42h
	DEFB 42h
	DEFB 7Eh
	DEFB 00h
	DEFB 0Ch
	DEFB 22h
	DEFB 2Ch
	DEFB 41h
	DEFB 5Dh
	DEFB 0EAh
	DEFB 1Ah
	DEFB 00h
.LABEL.__LABEL49:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_xs:
	DEFW .LABEL.__LABEL50
_xs.__DATA__.__PTR__:
	DEFW _xs.__DATA__
_xs.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL50:
	DEFW 0000h
	DEFB 01h
_ys:
	DEFW .LABEL.__LABEL51
_ys.__DATA__.__PTR__:
	DEFW _ys.__DATA__
_ys.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL51:
	DEFW 0000h
	DEFB 01h
_xss:
	DEFW .LABEL.__LABEL52
_xss.__DATA__.__PTR__:
	DEFW _xss.__DATA__
_xss.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL52:
	DEFW 0000h
	DEFB 01h
_yss:
	DEFW .LABEL.__LABEL53
_yss.__DATA__.__PTR__:
	DEFW _yss.__DATA__
_yss.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
.LABEL.__LABEL53:
	DEFW 0000h
	DEFB 01h
.core.ZXBASIC_USER_DATA_END:
.core.__MAIN_PROGRAM__:
#line 50 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 56 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 58 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 60 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 67 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 74 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 79 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 88 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 92 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 102 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 117 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 158 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 163 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 169 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 176 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 184 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 194 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 202 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 209 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 216 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 218 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		SPRITE_1x1_BUFFER_SIZE equ (6 * 8)
		SPRITE_1x2_BUFFER_SIZE equ (9 * 8)
		SPRITE_2x2_BUFFER_SIZE equ (15 * 8)
		SPRITE_1x1_SHIFTED_SIZE equ 4
		SPRITE_1x2_SHIFTED_SIZE equ 6
		SPRITE_2x2_SHIFTED_SIZE equ 9
		TOTAL_1x1_OPS equ (4 * SPRITE_1x1_SHIFTED_SIZE)
		TOTAL_1x2_OPS equ (4 * SPRITE_1x2_SHIFTED_SIZE)
		TOTAL_2x2_OPS equ (4 * SPRITE_2x2_SHIFTED_SIZE)
		TOTAL_DRAW_OPS equ ((TOTAL_1x1_OPS + TOTAL_1x2_OPS + TOTAL_2x2_OPS) * 2)
		DRAW_OP_SIZE equ 5
#line 238 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		DRAW_OPS_SIZE equ (TOTAL_DRAW_OPS * DRAW_OP_SIZE)
		DRAW_OPS_DATA_SIZE equ (TOTAL_DRAW_OPS * 8)
		SPRITE_BUFFER_SIZE equ ((4 * SPRITE_1x1_BUFFER_SIZE)+(8 * SPRITE_1x2_BUFFER_SIZE)+(4 * SPRITE_2x2_BUFFER_SIZE))
		SPRITE_INDEX_SIZE equ ((4 + 8 + 4 + 1) * 2)
		jp GSPRITES_LIB_END
DRAW_OPS_A:
		defs DRAW_OPS_SIZE
DRAW_OPS_B:
		defs DRAW_OPS_SIZE
DRAW_OPS_DATA:
		defs DRAW_OPS_DATA_SIZE
CURRENT_DRAW_OPS:
		defw 0
CURRENT_CLEAR_OPS:
		defw 0
CURRENT_DRAW_COUNT:
		defb 0
CURRENT_CLEAR_COUNT:
		defb 0
DRAW_OPS_DATA_INDEX:
		defw 0
CELL_MAP_A:
		defs (32 * 24)
CELL_MAP_B:
		defs (32 * 24)
CURRENT_DRAW_MAP:
		defw 0
CURRENT_CLEAR_MAP:
		defw 0
SPRITE_BUFFER:
		defs SPRITE_BUFFER_SIZE
SPRITE_INDEX:
		defs SPRITE_INDEX_SIZE
SPRITE_COUNT:
		defb 0
#line 314 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 319 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
TILE_SET:
		defw 0
TILE_MAP:
		defs 768
#line 326 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
INIT_GFX_LIB:
#line 336 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 338
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 339
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 341
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 343
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 344
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 346
		ret
		ENDP
		PROC
RESET_GFX_LIB:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 354
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 355
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 357
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 358
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 360
		xor a
		ld de, SPRITE_BUFFER
		ld (de), a
		inc de
		ld hl, SPRITE_BUFFER
		ld bc, SPRITE_BUFFER_SIZE - 1
		ldir
#line 363
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 364
		xor a
		ld (SPRITE_COUNT), a
#line 367 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 373
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 374
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 377
#line 378 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
CLEAR_SCREEN:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 386
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 387
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 389
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 390
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 392
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 398
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 399
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 402
#line 403 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
		LOCAL RENDER_LOOP, END_RENDER, RESTORE_STACK
RENDER_FRAME:
#line 414 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		halt
#line 418 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld a, (CURRENT_DRAW_COUNT)
		cp 0
		jp z, END_RENDER
		ld hl, (CURRENT_DRAW_OPS)
		push hl
RENDER_LOOP:
		pop hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 432
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 433
		inc hl
#line 437 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		push hl
		ld h, b
		ld l, c
#line 441
		ld (RESTORE_STACK + 1), sp
		ld sp, hl
		ex de, hl
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
RESTORE_STACK:
		ld sp, 0
		ld hl, CURRENT_DRAW_COUNT
		dec (hl)
		jp nz, RENDER_LOOP
		pop bc
END_RENDER:
		ld bc, (CURRENT_DRAW_OPS)
		ld de, (CURRENT_CLEAR_OPS)
		ld (CURRENT_DRAW_OPS), de
		ld (CURRENT_CLEAR_OPS), bc
		ld de, (CURRENT_DRAW_MAP)
		ld bc, (CURRENT_CLEAR_MAP)
		ld (CURRENT_DRAW_MAP), bc
		ld (CURRENT_CLEAR_MAP), de
		xor a
		push de
		ld (de), a
		inc de
		pop hl
		ld bc, 767
		ldir
		ld a, (CURRENT_CLEAR_COUNT)
		ld (CURRENT_DRAW_COUNT), a
		xor a
		ld (CURRENT_CLEAR_COUNT), a
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 505
		ret
		ENDP
		PROC
CREATE_SPRITE_BUFFER:
		ld a, (SPRITE_COUNT)
		add a, a
		ld e, a
		ld d, 0
		ld hl, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 522
		push de
		ex de, hl
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 530
		ld hl, SPRITE_COUNT
		inc (hl)
		pop hl
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x1_SPRITE:
		push hl
		ld bc, SPRITE_1x1_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 558
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 8
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 579
		ex de, hl
		ld (ix+0), d
		ld (ix+16), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
#line 593 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL LOOP
CREATE_1x2_SPRITE:
		push hl
		ld bc, SPRITE_1x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 613
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 614
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 636
		ex de, hl
		ld (ix+0), d
		ld (ix+24), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
#line 651 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL LOOP
CREATE_2x2_SPRITE:
		push hl
		ld bc, SPRITE_2x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 671
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 672
		ex de, hl
		ld bc, 8
		add hl, bc
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 682
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 683
		ld hl, 8
		add hl, de
		ex de, hl
		pop iy
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld c, (iy+0)
		ld d, (iy+16)
		ld e, 0
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
#line 704
		ld (ix+0), c
		ld (ix+24), d
		ld (ix+48), e
		inc iy
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
#line 720 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 722 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL EXISTING_OP, REAL_EXISTING_OP
CREATE_DRAW_OP:
		push hl
		push bc
		ld l, c
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 736
		ld c, b
		ld b, 0
		add hl, bc
		ld de, (CURRENT_DRAW_MAP)
		push hl
		add hl, de
		ld a, (hl)
		and a
		jp nz, EXISTING_OP
		ld a, (CURRENT_DRAW_COUNT)
		inc a
		ld (CURRENT_DRAW_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 764
		add hl, hl
		add hl, hl
#line 765
		add hl, de
#line 770 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		pop de
		pop bc
		push de
		ld a, c
		and %00011000
		or  %01000000
		ld d, a
		ld a, c
		and %00000111
		rla
		rla
		rla
		rla
		rla
		or b
		ld e, a
		ld ixh, d
		ld ixl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 796
		ld de, (DRAW_OPS_DATA_INDEX)
		ld iyh, d
		ld iyl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 803
		ld (hl), 1
#line 809 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld l, 8
		ld h, 0
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
		ld hl, (CURRENT_CLEAR_MAP)
		add hl, bc
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (CURRENT_CLEAR_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 835
		add hl, hl
		add hl, hl
#line 836
		add hl, de
#line 843 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld d, ixh
		ld e, ixl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 851
		ex de, hl
		ld hl, TILE_MAP
		add hl, bc
		ld a, (hl)
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 863
		ld bc, (TILE_SET)
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 869
		ld (hl), 2
#line 880 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ld b, iyh
		ld c, iyl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
		inc bc
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (bc), a
#line 949 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ret
EXISTING_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 962
		add hl, hl
		add hl, hl
#line 963
		add hl, de
#line 968 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 974
		push hl
		push bc
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 979
		push de
		ld a, (hl)
		and 2
		jp z, REAL_EXISTING_OP
		ld (hl), 1
#line 996 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop af
#line 1010 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		pop hl
		push de
		push af
#line 1019 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_MAP)
		add hl, de
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (hl), a
		ld (CURRENT_CLEAR_COUNT), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1041
		add hl, hl
		add hl, hl
#line 1042
		add hl, de
#line 1047 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
#line 1052
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1057
		ld (hl), 2
#line 1068 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		push de
#line 1074 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ld de, (DRAW_OPS_DATA_INDEX)
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1080
		ld hl, 8
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
#line 1089 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		pop hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
		inc bc
		inc de
		inc hl
		ld a, (bc)
		or (hl)
		ld (de), a
#line 1149 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		ret
REAL_EXISTING_OP:
		pop hl
		pop hl
		pop hl
		pop hl
		pop hl
#line 1162 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ex de, hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
#line 1168
		ret
		ENDP
		PROC
		LOCAL LOOP
DRAW_SPRITE_COLUMN:
		LOOP
		push hl
		push bc
		ex af, af'
		call CREATE_DRAW_OP
		pop bc
		pop hl
		inc c
		ld de, 8
		add hl, de
		ex af, af'
		dec a
		jr nz, LOOP
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x1_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1215
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		call CREATE_DRAW_OP
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 16
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ld a,2
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 20
		add hl, de
		push bc
		push hl
		call CREATE_DRAW_OP
		pop hl
		pop bc
		inc b
		ld de, 16
		add hl, de
		call CREATE_DRAW_OP
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
#line 1300 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1315
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 24
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 28
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
#line 1395 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
DRAW_2x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1409
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 48
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		push bc
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 52
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		push bc
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		push bc
		call DRAW_SPRITE_COLUMN
		ld a, 3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
#line 1518 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
PRINT_CHAR:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1526
		add hl, de
		ex de, hl
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1540
		ld bc, 3C00h
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
#line 1588 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		PROC
SET_TILEMAP:
		ld de, TILE_SET
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1596
		ret
		ENDP
		PROC
SET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1605
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1624
		ld bc, (TILE_SET)
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
		PROC
SET_TILE_COLOR:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1676
		add hl, de
		ex de, hl
		ld hl, $5800
		add hl, de
		ld (hl), c
		ret
		ENDP
		PROC
GET_TILE_COLOR:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1692
		add hl, de
		ex de, hl
		ld hl, $5800
		add hl, de
		ld a, (hl)
		ret
		ENDP
		PROC
		LOCAL REAL_OP, NO_OP, END_SET
SET_TILE_CHECKED:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1709
		add hl, de
		push hl
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1730
		ld bc, (TILE_SET)
		add hl, bc
		push hl
		pop bc
		pop hl
		push hl
		push de
		push bc
		ld de, (CURRENT_DRAW_MAP)
		add hl, de
		ld a, (hl)
		and a
		jp z, NO_OP
REAL_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1759
		add hl, hl
		add hl, hl
#line 1760
		add hl, de
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		inc hl
		inc hl
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1772
		ld a, 2
		ld (hl), a
		pop de
		pop de
		jp END_SET
NO_OP:
		pop hl
		pop de
		pop bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
END_SET:
		ret
		ENDP
		PROC
GET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1835
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld a, (hl)
		ret
		ENDP
#line 1849 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
GSPRITES_LIB_END:
#line 2160 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
	ld a, 2
	call .core.BORDER
	call .core.CLS
	call _InitGFXLib
	ld hl, _tileSet.__DATA__
	call _SetTileset
	xor a
	ld (_y), a
	jp .LABEL.__LABEL0
.LABEL.__LABEL3:
	ld a, (_y)
	and 1
	jp nz, .LABEL.__LABEL5
	xor a
	ld (_x), a
	jp .LABEL.__LABEL7
.LABEL.__LABEL10:
	ld a, (_y)
	ld l, a
	ld h, 0
	push hl
	ld a, (_x)
	ld l, a
	push hl
	ld hl, 52
	push hl
	ld a, 1
	call _SetTile
	ld a, (_x)
	add a, 2
	ld (_x), a
.LABEL.__LABEL7:
	ld a, 31
	ld hl, (_x - 1)
	cp h
	jp nc, .LABEL.__LABEL10
	jp .LABEL.__LABEL4
.LABEL.__LABEL5:
	ld a, 1
	ld (_x), a
	jp .LABEL.__LABEL12
.LABEL.__LABEL15:
	ld a, (_y)
	ld l, a
	ld h, 0
	push hl
	ld a, (_x)
	ld l, a
	push hl
	ld hl, 56
	push hl
	ld a, 2
	call _SetTile
	ld a, (_x)
	add a, 2
	ld (_x), a
.LABEL.__LABEL12:
	ld a, 31
	ld hl, (_x - 1)
	cp h
	jp nc, .LABEL.__LABEL15
.LABEL.__LABEL4:
	ld hl, _y
	inc (hl)
.LABEL.__LABEL0:
	ld a, 23
	ld hl, (_y - 1)
	cp h
	jp nc, .LABEL.__LABEL3
	ld a, 4
	push af
	push af
	ld a, 86
	push af
	ld a, 2
	push af
	push af
	ld a, 3
	push af
	call _FillWithTile
	ld hl, _sprite.__DATA__
	call _Create1x1Sprite
	ld (_sNumber), a
	ld hl, _sprite2.__DATA__
	call _Create1x2Sprite
	ld (_sNumber2), a
	ld hl, _sprite3.__DATA__
	call _Create2x2Sprite
	ld (_sNumber3), a
	xor a
	ld (_xss.__DATA__ + 0), a
	ld a, 1
	ld (_yss.__DATA__ + 0), a
	xor a
	ld (_xss.__DATA__ + 1), a
	ld a, 255
	ld (_yss.__DATA__ + 1), a
	ld a, 1
	ld (_xss.__DATA__ + 2), a
	xor a
	ld (_yss.__DATA__ + 2), a
	ld a, 255
	ld (_xss.__DATA__ + 3), a
	xor a
	ld (_yss.__DATA__ + 3), a
	ld a, 1
	ld (_xss.__DATA__ + 4), a
	ld (_yss.__DATA__ + 4), a
	ld a, 255
	ld (_xss.__DATA__ + 5), a
	ld a, 1
	ld (_yss.__DATA__ + 5), a
	ld (_xss.__DATA__ + 6), a
	ld a, 255
	ld (_yss.__DATA__ + 6), a
	ld (_xss.__DATA__ + 7), a
	ld (_yss.__DATA__ + 7), a
	ld a, 1
	ld (_xss.__DATA__ + 8), a
	ld a, 2
	ld (_yss.__DATA__ + 8), a
	ld a, 255
	ld (_xss.__DATA__ + 9), a
	ld a, 254
	ld (_yss.__DATA__ + 9), a
	ld a, 255
	ld (_xss.__DATA__ + 10), a
	ld a, 2
	ld (_yss.__DATA__ + 10), a
	ld a, 1
	ld (_xss.__DATA__ + 11), a
	ld a, 254
	ld (_yss.__DATA__ + 11), a
	ld a, 10
	ld (_xs.__DATA__ + 0), a
	ld (_ys.__DATA__ + 0), a
	ld (_xs.__DATA__ + 1), a
	ld (_ys.__DATA__ + 1), a
	ld (_xs.__DATA__ + 2), a
	ld (_ys.__DATA__ + 2), a
	ld (_xs.__DATA__ + 3), a
	ld (_ys.__DATA__ + 3), a
	ld (_xs.__DATA__ + 4), a
	ld (_ys.__DATA__ + 4), a
	ld (_xs.__DATA__ + 5), a
	ld (_ys.__DATA__ + 5), a
	ld (_xs.__DATA__ + 6), a
	ld (_ys.__DATA__ + 6), a
	ld (_xs.__DATA__ + 7), a
	ld (_ys.__DATA__ + 7), a
	ld (_xs.__DATA__ + 8), a
	ld (_ys.__DATA__ + 8), a
	ld (_xs.__DATA__ + 9), a
	ld (_ys.__DATA__ + 9), a
	ld (_xs.__DATA__ + 10), a
	ld (_ys.__DATA__ + 10), a
	ld (_xs.__DATA__ + 11), a
	ld (_ys.__DATA__ + 11), a
.LABEL.__LABEL17:
	xor a
	ld (_b), a
	jp .LABEL.__LABEL19
.LABEL.__LABEL22:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, 43
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL25
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL25:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, 59
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL27
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL27:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_sNumber)
	call _Draw1x1Sprite
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, 43
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL29
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL29:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, 59
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL31
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL31:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_sNumber2)
	call _Draw1x2Sprite
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	add a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop af
	ld (hl), a
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, 43
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL33
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _yss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL33:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, 59
	cp (hl)
	sbc a, a
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, .LABEL.__LABEL35
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	ld a, (hl)
	neg
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xss
	call .core.__ARRAY
	pop af
	ld (hl), a
.LABEL.__LABEL35:
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _ys
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_b)
	ld h, 3
	call .core.__MUL8_FAST
	add a, 3
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _xs
	call .core.__ARRAY
	ld a, (hl)
	push af
	ld a, (_sNumber3)
	call _Draw2x2Sprite
	ld hl, _b
	inc (hl)
.LABEL.__LABEL19:
	ld a, 3
	ld hl, (_b - 1)
	cp h
	jp nc, .LABEL.__LABEL22
	call _RenderFrame
	jp .LABEL.__LABEL17
.core.__END_PROGRAM:
	di
	ld hl, (.core.__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
_InitGFXLib:
#line 1858 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		call INIT_GFX_LIB
#line 1862 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_InitGFXLib__leave:
	ret
_RenderFrame:
#line 1878 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		call RENDER_FRAME
#line 1882 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_RenderFrame__leave:
	ret
_Create1x1Sprite:
#line 1892 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_1x1_SPRITE
		pop iy
		pop ix
#line 1900 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Create1x1Sprite__leave:
	ret
_Draw1x1Sprite:
#line 1908 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_1x1_SPRITE
		pop iy
		pop ix
#line 1926 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Draw1x1Sprite__leave:
	ret
_Create1x2Sprite:
#line 1938 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_1x2_SPRITE
		pop iy
		pop ix
#line 1946 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Create1x2Sprite__leave:
	ret
_Draw1x2Sprite:
#line 1954 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_1x2_SPRITE
		pop iy
		pop ix
#line 1971 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Draw1x2Sprite__leave:
	ret
_Create2x2Sprite:
#line 1983 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_2x2_SPRITE
		pop iy
		pop ix
#line 1991 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Create2x2Sprite__leave:
	ret
_Draw2x2Sprite:
#line 1999 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_2x2_SPRITE
		pop iy
		pop ix
#line 2016 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_Draw2x2Sprite__leave:
	ret
_SetTileset:
#line 2081 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		call SET_TILEMAP
#line 2083 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_SetTileset__leave:
	ret
_SetTile:
#line 2089 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE
#line 2100 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
_SetTile__leave:
	ret
_FillWithTile:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+13)
	ld (ix-1), a
	jp .LABEL.__LABEL36
.LABEL.__LABEL39:
	ld a, (ix+15)
	ld (ix-2), a
	jp .LABEL.__LABEL41
.LABEL.__LABEL44:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld a, (ix+11)
	ld l, a
	push hl
	ld a, (ix+5)
	call _SetTile
	inc (ix-2)
.LABEL.__LABEL41:
	ld h, (ix-2)
	ld a, (ix+15)
	add a, (ix+9)
	dec a
	cp h
	jp nc, .LABEL.__LABEL44
	inc (ix-1)
.LABEL.__LABEL36:
	ld h, (ix-1)
	ld a, (ix+13)
	add a, (ix+7)
	dec a
	cp h
	jp nc, .LABEL.__LABEL39
_FillWithTile__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
	;; --- end of user code ---
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul16.asm"

.core.__MUL16:	; Mutiplies HL with the last value stored into de stack
	    ; Works for both signed and unsigned

	    PROC

	    LOCAL __MUL16LOOP
	    LOCAL __MUL16NOADD

	    ex de, hl
	    pop hl		; Return address
	    ex (sp), hl ; CALLEE caller convention

.core.__MUL16_FAST:
	    ld b, 16
	    ld a, h
	    ld c, l
	    ld hl, 0

__MUL16LOOP:
	    add hl, hl  ; hl << 1
	    sla c
	    rla         ; a,c << 1
	    jp nc, __MUL16NOADD
	    add hl, de

__MUL16NOADD:
	    djnz __MUL16LOOP

	    ret	; Result in hl (16 lower bits)

	    ENDP


#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

#line 24 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"


.core.__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

.core.__ARRAY:
	    PROC

	    LOCAL LOOP
	    LOCAL ARRAY_END
	    LOCAL RET_ADDRESS ; Stores return address
	    LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
	    ex (sp), hl	; Return address in HL, array address in the stack
	    ld (RET_ADDRESS + 1), hl ; Stores it for later

	    exx
	    pop hl		; Will use H'L' as the pointer
	    ld c, (hl)	; Loads Number of dimensions from (hl)
	    inc hl
	    ld b, (hl)
	    inc hl		; Ready
	    exx

	    ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 64 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    pop bc		; Get next index (Ai) from the stack

#line 74 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    add hl, bc	; Adds current index

	    exx			; Checks if B'C' = 0
	    ld a, b		; Which means we must exit (last element is not multiplied by anything)
	    or c
	    jr z, ARRAY_END		; if B'Ci == 0 we are done

	    ld e, (hl)			; Loads next dimension into D'E'
	    inc hl
	    ld d, (hl)
	    inc hl
	    push de
	    dec bc				; Decrements loop counter
	    exx
	    pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
	    jp LOOP

ARRAY_END:
	    ld a, (hl)
	    exx

#line 103 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    ex de, hl
	    ld hl, (TMP_ARR_PTR)
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a
	    add hl, de  ; Adds element start

RET_ADDRESS:
	    jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, .core.__MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, .core.__MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

	    ENDP


#line 2159 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/border.asm"
	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register


	.core.BORDER EQU 229Bh



	; Nothing to do! (Directly from the ZX Spectrum ROM)
#line 2160 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"
	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/sposn.asm"
	; Printing positioning library.

	    PROC
	    LOCAL ECHO_E

.core.__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from .core.S_POSN mem var.
	    ld de, (.core.S_POSN)
	    ld hl, (.core.MAXX)
	    or a
	    sbc hl, de
	    ex de, hl
	    ret


.core.__SAVE_S_POSN:		; Saves ROW, COL from DE into .core.S_POSN mem var.
	    ld hl, (.core.MAXX)
	    or a
	    sbc hl, de
	    ld (.core.S_POSN), hl ; saves it again
	    ret


	ECHO_E	EQU 23682
	.core.MAXX	EQU ECHO_E   ; Max X position + 1
	.core.MAXY	EQU .core.MAXX + 1 ; Max Y position + 1

	.core.S_POSN	EQU 23688
	.core.POSX	EQU .core.S_POSN		; Current POS X
	.core.POSY	EQU .core.S_POSN + 1	; Current POS Y

	    ENDP


#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"


.core.CLS:
	    PROC

	    LOCAL COORDS
	    LOCAL __CLS_SCR
	    LOCAL ATTR_P
	    LOCAL SCREEN

	    ld hl, 0
	    ld (COORDS), hl
	    ld hl, 1821h
	    ld (.core.S_POSN), hl
__CLS_SCR:
	    ld hl, SCREEN
	    ld (hl), 0
	    ld d, h
	    ld e, l
	    inc de
	    ld bc, 6144
	    ldir

	    ; Now clear attributes

	    ld a, (ATTR_P)
	    ld (hl), a
	    ld bc, 767
	    ldir
	    ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change .core.CLS, DRAW & PRINTing address

	.core.SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
	    ; to get the start of the screen
	    ENDP


#line 2161 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul8.asm"

.core.__MUL8:		; Performs 8bit x 8bit multiplication
	    PROC

	    ;LOCAL __MUL8A
	    LOCAL __MUL8LOOP
	    LOCAL __MUL8B
	    ; 1st operand (byte) in A, 2nd operand into the stack (AF)
	    pop hl	; return address
	    ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

.core.__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

	    ret		; result = HL
	    ENDP


#line 2162 "C:/Users/geniw/source/repos/GuSprites/GuSprites/ZxBasicFiles/GuSprites.zxbas"

	END
